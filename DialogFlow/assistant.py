import logging
import random
from flask_assistant import Assistant, ask, event
from Application.flaskWrapper import FlaskWrapper
from DataBase.dbController import DbController
from DataBase.DataModels import *
from flask_assistant import context_manager

# Create assistant
logging.getLogger('flask_assistant').setLevel(logging.DEBUG)
Assistant = Assistant(app=FlaskWrapper.App, route='/assistant')


@Assistant.action('Default Welcome Intent')
def sayHello():
    # print("inSayHello")
    # basicResponses = ['Â¡Hola! ðŸ¤– Mi nombre es Aleck y te voy a ayudar con tus compras!!',
    #                   'Â¡Hey! ðŸ¤– Soy un asistente virtual y me encantarÃ­a ayudarte a elegir tus productos',
    #                   'Â¡Buenos dÃ­as! ðŸ¤– Soy Aleck, y soy tu asistente virtual para compras online']
    # print("Before event")
    # # response = ask(random.choice(basicResponses))
    # response = event(event_name='askProductCategory', speech=random.choice(basicResponses))
    # print("afterEvent")
    # return response
    return event("askProductCategory")


@Assistant.action('buy>product.category')
def askProductCategory():
    print("inSayHello")
    basicResponses = ['Â¿QuÃ© estÃ¡s buscando?',
                      'Â¿QuÃ© te gustarÃ­a comprar?',
                      'Â¿QuÃ© tipo de producto te interesa?',
                      'Dime una categorÃ­a de producto para empezar']
    print("Before event")
    response = event(event_name='askRange', speech=random.choice(basicResponses))
    print("afterEvent")
    return response

@Assistant.action('product.category>sp.range')
def askRange(productCategory):

    if productCategory == 'smartphone':

        basicResponses = ['Â¿QuÃ© categorÃ­a de mÃ³vil estÃ¡s buscando?',
                          'Â¿QuÃ© rango de SmartPhones te interesa?',
                          'Elije una de las siguientes gamas para poder empezar',
                          'Lo primero es elegir la gama de SmartPhones que buscamos. Ten encuenta que de esta decisiÃ³n depende bastante el precio, por lo que te recomiendo que elijas de acuerdo a tus necesidades reales. No queremos gastar dinero en algo que no necesitamos!']
        ranges = DbController.instance().getAll(Range)
        response = event(event_name='askScreen', speech=random.choice(basicResponses)).build_carousel()

        for range in ranges:
            response.add_item(title=range.name, key=range.name, description=range.description)
    else:
        response = event(event_name='askProductCategory',
                         speech='Lo siento, ahora mismo solo puedo ayudarte con la categorÃ­a de SmartPhones.')

    context_manager.add(productCategory)

    return response


@Assistant.context('smartphone')
@Assistant.action('sp.range>screen')
def askScreen(smartphoneRange):

    basicResponses = [
        'Vamos a empezar por las dimensiones del SmartPhone, que dependen principalmente del tamaÃ±o de pantalla.',
        'Las dimensiones del SmartPhone determinan su tamaÃ±o. Â¿QuÃ© tamaÃ±o de pantalla estÃ¡s buscando?']
    range = DbController.instance().getOneByName(Range, smartphoneRange)

    response = event(event_name='askRAM', speech=random.choice(basicResponses)).build_carousel()
    for screen in range.screens:
        response.add_item(title=screen.name, key=screen.name, description=screen.description)

    context_manager.add('smartphone')

    return response


@Assistant.action('smartphone')
def showSmartphoneCard(smartphoneBrand, smartphoneName):
    smartphone = DbController.instance().getOneByCompanyAndName(SmartPhone, smartphoneBrand, smartphoneName)

    response = ask('AquÃ­ lo tienes:')
    response.card(title="{0} {1}".format(smartphone.company, smartphone.name),
                  link=smartphone.officialURL,
                  linkTitle='Web oficial',
                  text="Precio medio: {0!s}â‚¬".format(smartphone.avgPrice))

    context_manager.add('smartphone')

    return response


# Prompts

@Assistant.prompt_for('smartphoneName', intent_name='smartphone')
def promptSmartphoneName(smartphoneName):
    response = "Â¿PodrÃ­as decirme el nombre del telÃ©fono que estÃ¡s buscando?"
    return ask(response)


@Assistant.prompt_for('smartphoneBrand', intent_name='smartphone')
def promptSmartphoneBrand(smartphoneBrand):
    response = "Â¿CuÃ¡l la marca del smartphone que estÃ¡s buscando?"
    return ask(response)


@Assistant.prompt_for('smartphoneRange', intent_name='sp.range>screen')
def promptSmartphoneRange(smartphoneRange):
    response = "Â¿Podrias decirme la gama de SmartPhone en la que estÃ¡s interesado?"
    return ask(response)
